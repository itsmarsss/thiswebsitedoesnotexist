"use client";

import { useState, useEffect } from "react";
import { useRouter, usePathname } from "next/navigation";
import { motion, AnimatePresence, Variants } from "framer-motion";
import { generateRandomPath } from "@/lib/randomPaths";
import Tooltip from "./Tooltip";
import MotionToolButton from "./MotionToolButton";
import SocialIcon from "./SocialIcon";
import Icon from "./Icon";

const container: Variants = {
    hidden: {
        opacity: 0,
        transition: { staggerChildren: 0.05, staggerDirection: -1 },
    },
    show: {
        opacity: 1,
        transition: {
            staggerChildren: 0.05,
            delayChildren: 0.05,
        },
    },
};

const item: Variants = {
    hidden: {
        opacity: 0,
        y: 10,
        transition: { duration: 0.2 },
    },
    show: {
        opacity: 1,
        y: 0,
        transition: {
            type: "spring",
            stiffness: 500,
            damping: 25,
        },
    },
};

export default function HoverToolbar() {
    const router = useRouter();
    const pathname = usePathname();
    const [isExpanded, setIsExpanded] = useState(true);
    const [history, setHistory] = useState<string[]>([]);
    const [isRegenerating, setIsRegenerating] = useState(false);

    useEffect(() => {
        setTimeout(() => {
            setIsExpanded(false);
        }, 2000);
    }, []);

    // Load history on mount and save new paths
    useEffect(() => {
        // Load history from localStorage
        const savedHistory = localStorage.getItem("pathHistory");
        if (savedHistory) {
            setHistory(JSON.parse(savedHistory));
        }

        // Add current path to history if it's not the latest
        if (pathname !== "/") {
            setHistory((prev) => {
                const newHistory = [
                    pathname,
                    ...prev.filter((path) => path !== pathname),
                ].slice(0, 100); // Keep MAX_HISTORY logic
                localStorage.setItem("pathHistory", JSON.stringify(newHistory));
                return newHistory;
            });
        }
    }, [pathname]);

    const handleSoftReload = async () => {
        try {
            setIsRegenerating(true);
            const iframe = document.querySelector("iframe");
            if (iframe?.contentDocument) {
                const currentHTML =
                    iframe.contentDocument.documentElement.outerHTML;
                iframe.contentDocument.open();
                iframe.contentDocument.write(currentHTML);
                iframe.contentDocument.close();
            }
        } catch (error) {
            console.error("Error during soft reload:", error);
        } finally {
            setIsRegenerating(false);
        }
    };

    const handleRandomClick = () => {
        const randomPath = generateRandomPath();
        router.push(randomPath);
    };

    const handleDownload = () => {
        // Get the iframe element
        const iframe = document.querySelector("iframe");
        if (!iframe?.contentDocument) return;

        // Get the HTML content
        const html = iframe.contentDocument.documentElement.outerHTML;

        // Create a blob and download link
        const blob = new Blob([html], { type: "text/html" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `${pathname.slice(1) || "home"}.html`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    };

    const handleShare = () => {
        const text = `Check out this AI-generated website I found: ${pathname}\n\nGenerated by This Website Does Not Exist ðŸ¤–âœ¨\n`;
        const url = typeof window !== "undefined" ? window.location.href : "";
        window.open(
            `https://twitter.com/intent/tweet?text=${encodeURIComponent(
                text
            )}&url=${encodeURIComponent(url)}`,
            "_blank"
        );
    };

    return (
        <div className="relative">
            <div
                className="fixed top-0 right-0 w-24 h-screen z-[9998] bg-transparent"
                onMouseEnter={() => setIsExpanded(true)}
            />
            <motion.div
                className="fixed top-4 right-4 z-[9999] h-[calc(100vh-2rem)]"
                animate={{
                    width: isExpanded ? "20rem" : "4rem",
                    x: isExpanded ? 0 : 10,
                }}
                transition={{
                    duration: 0.2,
                    ease: [0.2, 0, 0, 1],
                }}
                onMouseLeave={() => setIsExpanded(false)}
                initial={false}
            >
                <motion.div
                    className="bg-black/40 backdrop-blur-2xl text-white h-full relative rounded-2xl ring-1 ring-white/20"
                    animate={{
                        scale: isExpanded ? 1 : 0.98,
                    }}
                    transition={{ duration: 0.2 }}
                >
                    <div className="absolute inset-0 bg-gradient-to-b from-white/[0.08] to-transparent pointer-events-none rounded-2xl" />
                    <div className="absolute inset-0 bg-gradient-to-b from-black/40 via-black/20 to-black/40 pointer-events-none rounded-2xl" />
                    <AnimatePresence mode="wait">
                        {isExpanded ? (
                            <motion.div
                                key="expanded"
                                className="absolute inset-0 overflow-y-auto [&::-webkit-scrollbar]:hidden [-ms-overflow-style:'none'] [scrollbar-width:none]"
                                initial="hidden"
                                animate="show"
                                exit="hidden"
                                variants={container}
                            >
                                <div className="p-6 pb-24 min-h-full flex flex-col gap-3 relative">
                                    <div className="flex-none">
                                        <motion.h2
                                            variants={item}
                                            className="text-md font-bold mb-1 bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent tracking-tight"
                                        >
                                            Tools
                                        </motion.h2>

                                        <motion.div
                                            variants={container}
                                            className="space-y-2"
                                        >
                                            <motion.div
                                                variants={item}
                                                className="bg-black/20 backdrop-blur rounded-xl p-2 space-y-1 ring-1 ring-white/10"
                                            >
                                                <MotionToolButton
                                                    icon={
                                                        <Icon type="refresh" />
                                                    }
                                                    text="Hard Reload"
                                                    tooltip="Regenerate with new content"
                                                    onClick={() =>
                                                        window.location.reload()
                                                    }
                                                />

                                                <MotionToolButton
                                                    icon={
                                                        <Icon type="sparkles" />
                                                    }
                                                    text="Soft Reload"
                                                    tooltip="Refresh the current content"
                                                    onClick={handleSoftReload}
                                                    isLoading={isRegenerating}
                                                    disabled={isRegenerating}
                                                />
                                            </motion.div>

                                            <motion.div
                                                variants={item}
                                                className="bg-black/20 backdrop-blur rounded-xl p-2 space-y-1 ring-1 ring-white/10"
                                            >
                                                <MotionToolButton
                                                    icon={<Icon type="dice" />}
                                                    text="Random"
                                                    tooltip="Generate random website"
                                                    onClick={handleRandomClick}
                                                />

                                                <MotionToolButton
                                                    icon={
                                                        <Icon type="download" />
                                                    }
                                                    text="Download HTML"
                                                    tooltip="Download page HTML"
                                                    onClick={handleDownload}
                                                />

                                                <MotionToolButton
                                                    icon={<Icon type="share" />}
                                                    text="Share on Twitter"
                                                    tooltip="Share this website on Twitter"
                                                    onClick={handleShare}
                                                />

                                                <MotionToolButton
                                                    icon={<Icon type="home" />}
                                                    text="Home"
                                                    tooltip="Return to home page"
                                                    onClick={() =>
                                                        router.push("/")
                                                    }
                                                />
                                            </motion.div>
                                        </motion.div>
                                    </div>

                                    <motion.div
                                        variants={item}
                                        className="flex-none"
                                    >
                                        <div className="text-sm">
                                            <motion.div
                                                variants={item}
                                                className="font-medium mb-1 text-white/90"
                                            >
                                                Current Path
                                            </motion.div>
                                            <motion.div
                                                variants={item}
                                                className="bg-black/20 backdrop-blur rounded-xl p-3 font-mono text-sm break-all shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)] ring-1 ring-white/10"
                                            >
                                                <div className="truncate">
                                                    {pathname}
                                                </div>
                                            </motion.div>
                                        </div>
                                    </motion.div>

                                    {history.length > 0 && (
                                        <motion.div
                                            variants={item}
                                            className="text-sm flex-none"
                                        >
                                            <motion.div
                                                variants={item}
                                                className="font-medium mb-1 flex items-center justify-between text-white/90"
                                            >
                                                <span className="truncate">
                                                    History
                                                </span>
                                                <div className="flex gap-1 flex-none ml-2">
                                                    <Tooltip text="Scroll up">
                                                        <motion.button
                                                            variants={item}
                                                            onClick={() => {
                                                                const container =
                                                                    document.querySelector(
                                                                        "#history-container"
                                                                    );
                                                                if (container) {
                                                                    container.scrollBy(
                                                                        {
                                                                            top: -41,
                                                                            behavior:
                                                                                "smooth",
                                                                        }
                                                                    );
                                                                }
                                                            }}
                                                            className="w-8 h-6 flex items-center justify-center bg-black/20 hover:bg-black/40 rounded-lg transition-all duration-150 text-white/90 hover:text-white hover:scale-110 active:scale-95 ring-1 ring-white/10"
                                                            whileHover={{
                                                                scale: 1.1,
                                                            }}
                                                            whileTap={{
                                                                scale: 0.95,
                                                            }}
                                                        >
                                                            â–²
                                                        </motion.button>
                                                    </Tooltip>
                                                    <Tooltip text="Scroll down">
                                                        <motion.button
                                                            variants={item}
                                                            onClick={() => {
                                                                const container =
                                                                    document.querySelector(
                                                                        "#history-container"
                                                                    );
                                                                if (container) {
                                                                    container.scrollBy(
                                                                        {
                                                                            top: 41,
                                                                            behavior:
                                                                                "smooth",
                                                                        }
                                                                    );
                                                                }
                                                            }}
                                                            className="w-8 h-6 flex items-center justify-center bg-black/20 hover:bg-black/40 rounded-lg transition-all duration-150 text-white/90 hover:text-white hover:scale-110 active:scale-95 ring-1 ring-white/10 cursor-pointer"
                                                            whileHover={{
                                                                scale: 1.1,
                                                            }}
                                                            whileTap={{
                                                                scale: 0.95,
                                                            }}
                                                        >
                                                            â–¼
                                                        </motion.button>
                                                    </Tooltip>
                                                </div>
                                            </motion.div>
                                            <motion.div
                                                variants={item}
                                                className="h-40 bg-black/20 backdrop-blur rounded-xl shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)] ring-1 ring-white/10"
                                            >
                                                <div
                                                    id="history-container"
                                                    className="h-full overflow-y-auto [&::-webkit-scrollbar]:hidden [-ms-overflow-style:'none'] [scrollbar-width:none] p-2"
                                                >
                                                    <motion.div
                                                        variants={container}
                                                        className="space-y-1"
                                                    >
                                                        {history.map(
                                                            (path, index) => (
                                                                <motion.a
                                                                    key={index}
                                                                    variants={
                                                                        item
                                                                    }
                                                                    onClick={(
                                                                        e
                                                                    ) => {
                                                                        e.preventDefault();
                                                                        router.push(
                                                                            path
                                                                        );
                                                                    }}
                                                                    className="block px-3 py-2 bg-black/20 hover:bg-black/40 rounded-lg font-mono text-sm transition-all duration-150 cursor-pointer hover:scale-[1.02] active:scale-[0.98] ring-1 ring-white/10"
                                                                    whileHover={{
                                                                        scale: 1.02,
                                                                    }}
                                                                    whileTap={{
                                                                        scale: 0.98,
                                                                    }}
                                                                >
                                                                    <div className="truncate">
                                                                        {path}
                                                                    </div>
                                                                </motion.a>
                                                            )
                                                        )}
                                                    </motion.div>
                                                </div>
                                            </motion.div>
                                        </motion.div>
                                    )}

                                    <motion.div
                                        variants={item}
                                        className="fixed bottom-4 right-6 w-[calc(20rem-3rem)] bg-white/50 backdrop-blur-md rounded-xl p-2 ring-1 ring-white/10"
                                    >
                                        <div className="grid grid-cols-2 gap-2">
                                            <MotionToolButton
                                                icon={
                                                    <SocialIcon
                                                        type="github"
                                                        className="w-5 h-5"
                                                    />
                                                }
                                                text="GitHub"
                                                tooltip="Visit my GitHub profile"
                                                onClick={() =>
                                                    window.open(
                                                        "https://github.com/itsmarsss",
                                                        "_blank"
                                                    )
                                                }
                                            />
                                            <MotionToolButton
                                                icon={
                                                    <SocialIcon
                                                        type="x"
                                                        className="w-5 h-5"
                                                    />
                                                }
                                                text="Twi- X"
                                                tooltip="Visit my X profile"
                                                onClick={() =>
                                                    window.open(
                                                        "https://x.com/__kennywu__",
                                                        "_blank"
                                                    )
                                                }
                                            />
                                        </div>
                                    </motion.div>
                                </div>
                            </motion.div>
                        ) : (
                            <motion.div
                                key="collapsed"
                                className="absolute inset-0 flex items-center justify-center bg-gradient-to-b from-white/[0.08] via-transparent to-transparent"
                                initial={{ opacity: 0 }}
                                animate={{ opacity: 1 }}
                                exit={{ opacity: 0 }}
                                transition={{ duration: 0.15 }}
                            >
                                <motion.div
                                    className="rotate-90 whitespace-nowrap text-sm text-white/90 tracking-wider font-medium"
                                    initial={{ opacity: 0, y: 10 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    exit={{ opacity: 0, y: 10 }}
                                    transition={{
                                        type: "spring",
                                        stiffness: 500,
                                        damping: 25,
                                    }}
                                >
                                    Hover for tools
                                </motion.div>
                            </motion.div>
                        )}
                    </AnimatePresence>
                </motion.div>
            </motion.div>
        </div>
    );
}
